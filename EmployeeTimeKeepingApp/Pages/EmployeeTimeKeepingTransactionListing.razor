@page "/time-keeping-transaction/employee/{id}"

@using EmployeeTimeKeepingApp.Services
@using EmployeeTimeKeepingApp.Entities
@inject IEmployeeService employeeService
@inject ITimeKeepingTransactionService timeKeepingTransactionService

<style>


    .btn-custom {
        color: black;
        float: left;
        padding: 8px 16px;
        text-decoration: none;
        transition: background-color .3s;
        border: 2px solid #000;
        margin: 0px 5px 0px 5px;
    }
</style>



@if (model == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (employee !=null)
    {
       <h3>Time Keeping Transaction For Employee: @employee.FirstName @employee.LastName</h3>
    }

    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th>
                    ID
                </th>
                <th>
                    Employee
                </th>
                <th>
                    Transaction Type
                </th>
                <th>
                    Transaction Date
                </th>

            </tr>
        </thead>
        <tbody>
            @if (timeKeepingTransactionService == null || model.Count == 0)
            {
                <tr>
                    <td colspan="5">
                        No Records to display
                    </td>
                </tr>
            }
            else
            {
                foreach (var timeKeepingTransaction in model)
                {
                    <tr>
                        <td>@timeKeepingTransaction.TimeKeepingTransactionId</td>
                        <td>@timeKeepingTransaction.Employee.FirstName @timeKeepingTransaction.Employee.LastName</td>
                        <td>@timeKeepingTransaction.TransactionType.TransactionTypName</td>
                        <td>@timeKeepingTransaction.TransactionDateTime</td>

                    </tr>
                }
            }

        </tbody>
    </table>
    <div class="pagination">
        <button class="btn btn-custom" @onclick=@(async ()=>await NavigateToPage("previous"))>Prev</button>

        @for (int i = startPage; i <= endPage; i++)
        {
            var currentPage = i;
            <button class="btn btn-custom pagebutton @(currentPage==curPage?"btn-danger":"")" @onclick=@(async () =>await refreshRecords(currentPage))>
                @currentPage
            </button>
        }

        <button class="btn btn-custom" @onclick=@(async ()=>await NavigateToPage("next"))>Next</button>

    </div>
}

@code {
    [Parameter]
    public string id { get; set; }

    List<TimeKeepingTransaction> model;
    Employee employee;


    #region Pagination

    int totalPages;
    int totalRecords;
    int curPage = 0;
    int pagerSize;
    int pageSize;
    int startPage;
    int endPage;

    #endregion

    protected override async Task OnInitializedAsync()
    {
        var employeeId = Convert.ToInt32(id);
        employee = await employeeService.GetById(employeeId);
        //display total page buttons
        pagerSize = 3;
        pageSize = 10;
        curPage = 1;
        model = await timeKeepingTransactionService.GetTimeKeepingTransactionsByEmployee(pageSize, curPage - 1, employeeId);
        totalRecords = await timeKeepingTransactionService.CountByEmployee(employeeId);
        totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);
        SetPagerSize("forward");
    }


    public async Task refreshRecords(int currentPage)
    {
        model = await timeKeepingTransactionService.GetTimeKeepingTransactionsByEmployee(pageSize, (currentPage - 1), Convert.ToInt32(id));
        curPage = currentPage;
        this.StateHasChanged();
    }

    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
        else
        {
            startPage = 1;
            endPage = totalPages;
        }
    }

    public async Task NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
            }
        }
        await refreshRecords(curPage);
    }


}
